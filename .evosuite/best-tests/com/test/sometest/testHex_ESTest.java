/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 04 02:48:41 GMT 2019
 */

package com.test.sometest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.test.sometest.testHex;
import java.security.InvalidKeyException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class testHex_ESTest extends testHex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "xTEcn@@RQFxJMcjQ";
      stringArray0[1] = "d;Wrayn7eYK@cE.n{K=";
      stringArray0[2] = "\u957F\u5EA6\u4E0D\u662F\u5076\u6570";
      stringArray0[3] = "";
      testHex.main(stringArray0);
      testHex.main(stringArray0);
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "xTEcn@@RQFxJMcjQ";
      stringArray1[1] = "";
      stringArray1[2] = "xTEcn@@RQFxJMcjQ";
      stringArray1[3] = "";
      stringArray1[4] = "d;Wrayn7eYK@cE.n{K=";
      stringArray1[5] = "";
      stringArray1[6] = "";
      testHex.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = testHex.decrypt("", "xTEcn@@RQFxJMcjQ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = testHex.decrypt("d;Wrayn7eYK@cE.n{K=", "xTEcn@@RQFxJMcjQ");
      assertNull(string1);
      
      testHex.main(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-20);
      // Undeclared exception!
      try { 
        testHex.hex2byte(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u957F\u5EA6\u4E0D\u662F\u5076\u6570
         //
         verifyException("com.test.sometest.testHex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-111);
      byte[] byteArray1 = testHex.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)108, (byte) (-26), (byte)0, (byte) (-111)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string0 = testHex.byte2hex(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)108, (byte) (-26), (byte)0, (byte) (-111)}, byteArray0);
      assertEquals("789C6360C879C630110004F901E4", string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      
      String string1 = testHex.encrypt("789C6360C879C630110004F901E4", "b[|x=!tLBfgO~Fe&");
      assertEquals("fddffbdfa25fba3280ded159204e9246c571cff163ea32dc454855c0afccae32", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      testHex.main((String[]) null);
      String string2 = testHex.decrypt("JzKp-F27(G", "JzKp-F27(G");
      assertNull(string2);
      
      try { 
        testHex.encrypt("789C6360C879C630110004F901E4", "JzKp-F27(G");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        testHex.base64Encode((byte[]) null, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = testHex.byte2hex(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = testHex.base64Encode(byteArray0, "");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = testHex.hex2byte(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        testHex.hex2byte((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.test.sometest.testHex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = testHex.decrypt("", "");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        testHex.byte2hex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.test.sometest.testHex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        testHex.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = testHex.decrypt((String) null, (String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = testHex.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)39, (byte)0, (byte)0, (byte)0, (byte) (-57), (byte)54, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string1 = testHex.decrypt((String) null, "J&[/&2[vM(sVBM5\rJ2");
      assertNull(string1);
      
      byte[] byteArray2 = testHex.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)39, (byte)0, (byte)0, (byte)0, (byte) (-57), (byte)54, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)54;
      byteArray3[1] = (byte)16;
      byteArray3[2] = (byte)39;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)54;
      byteArray3[5] = (byte)54;
      byte[] byteArray4 = testHex.compress(byteArray3);
      assertArrayEquals(new byte[] {(byte)54, (byte)16, (byte)39, (byte)0, (byte)54, (byte)54}, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      
      String string2 = testHex.byte2hex(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)39, (byte)0, (byte)0, (byte)0, (byte) (-57), (byte)54, (byte)0}, byteArray0);
      assertEquals("789CBBA8CEC0C070DC8C01000A6201F6", string2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotNull(string2);
      
      byte[] byteArray5 = testHex.compress(byteArray3);
      assertArrayEquals(new byte[] {(byte)54, (byte)16, (byte)39, (byte)0, (byte)54, (byte)54}, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray5);
      
      try { 
        testHex.encrypt("J&[/&2[vM(sVBM5\rJ2", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.test.sometest.testHex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      testHex testHex0 = new testHex();
      assertNotNull(testHex0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      byte[] byteArray1 = testHex.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte) (-5), (byte)11, (byte)0, (byte)0, (byte) (-2), (byte)0, (byte) (-2)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string0 = testHex.byte2hex(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertEquals("FD", string0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      
      String string1 = testHex.byte2hex(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte) (-5), (byte)11, (byte)0, (byte)0, (byte) (-2), (byte)0, (byte) (-2)}, byteArray1);
      assertEquals("789CFB0B0000FE00FE", string1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        testHex.encrypt("rw", "Base64 string length must be 4*n");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // Illegal key size or default parameters
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        testHex.encrypt("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      String string0 = testHex.base64Encode(byteArray0, "");
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertEquals("aA==", string0);
      assertNotNull(string0);
      
      String string1 = testHex.byte2hex(byteArray0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertEquals("68", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = testHex.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-100), (byte) (-53), (byte)0, (byte)0, (byte)0, (byte)105, (byte)0, (byte)105}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        testHex.hex2byte(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u957F\u5EA6\u4E0D\u662F\u5076\u6570
         //
         verifyException("com.test.sometest.testHex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      testHex.main(stringArray0);
      testHex testHex0 = new testHex();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)27;
      byteArray0[5] = (byte)27;
      byteArray0[7] = (byte)0;
      testHex.base64Encode(byteArray0, "c:my.jpg");
      testHex.main(stringArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = testHex.compress(byteArray1);
      // Undeclared exception!
      try { 
        testHex.hex2byte(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x\uFFFD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        testHex.hex2byte(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u957F\u5EA6\u4E0D\u662F\u5076\u6570
         //
         verifyException("com.test.sometest.testHex", e);
      }
  }
}
